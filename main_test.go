package main

import (
	"testing"
	"time"
)

func TestReplaceUnixtimeToDatetime(t *testing.T) {
	tests := []struct {
		name   string
		input  string
		expect string
	}{
		{"empty", "", ""},
		{"one space", " ", " "},
		{"two spaces", " ", " "},
		{"9 digits", "172099999", "172099999"},
		{"10 digits", "1720999999", "2024-07-14T23:33:19Z"},
		{"12 digits", "172099999932", "172099999932"},
		{"13 digits", "1720999999321", "2024-07-14T23:33:19.321Z"},
		{"14 digits", "17209999993216", "17209999993216"},
		{"19 digits", "1720999999172099999", "1720999999172099999"},
		{"20 digits", "17209999991720999999", "17209999991720999999"},
		{"22 digits", "1720999999172099999945", "1720999999172099999945"},
		{"23 digits", "17209999991720999999321", "17209999991720999999321"},
		{"24 digits", "172099999917209999993217", "172099999917209999993217"},
		{"25 digits", "1720999999172099999932178", "1720999999172099999932178"},
		{"26 digits", "17209999991720999999321784", "17209999991720999999321784"},
		{"27 digits", "172099999917209999993217842", "172099999917209999993217842"},
		{"space before unixtime", " 1720999990", " 2024-07-14T23:33:10Z"},
		{"space after unixtime", "1720999990 ", "2024-07-14T23:33:10Z "},
		{"same 10 digits", "1720999999 1720999999", "2024-07-14T23:33:19Z 2024-07-14T23:33:19Z"},
		{"same 13 digits", "1722543769134 1722543769134", "2024-08-01T20:22:49.134Z 2024-08-01T20:22:49.134Z"},
		{"comma separated 10 digits", "a,1720999999,1722543769", "a,2024-07-14T23:33:19Z,2024-08-01T20:22:49Z"},
		{"space separated 13 digits", "1720999999000 1722543769134 ", "2024-07-14T23:33:19.000Z 2024-08-01T20:22:49.134Z "},
		{"10 digits and 13 digits", "1720999999 1722543769876", "2024-07-14T23:33:19Z 2024-08-01T20:22:49.876Z"},
		{"13 digits and 10 digits", "1720999999111 1722543769", "2024-07-14T23:33:19.111Z 2024-08-01T20:22:49Z"},
		{"multi bytes #1", "あ1722543769･1722543769876／", "あ2024-08-01T20:22:49Z･2024-08-01T20:22:49.876Z／"},
		{"multi bytes #2", "１７２２５４３７６９", "１７２２５４３７６９"},
	}
	for _, tt := range tests {
		unixNow := 1720999999321 // 2024-07-14T23:33:19.321Z
		now := time.Unix(0, int64(unixNow)*int64(time.Millisecond))
		if actual := replaceUnixtimeToDatetime(tt.input, now); actual != tt.expect {
			t.Errorf("[ NG ] => %s\n   input: %v\n  expect: %v\n  actual: %v", tt.name, tt.input, tt.expect, actual)
		} else {
			//t.Logf("[ OK ] => %s\n   input: %v\n  expect: %v\n  actual: %v", tt.name, tt.input, tt.expect, actual)
		}
	}
}
